package locator_v2

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_Distance(t *testing.T) {
	germany := Country{
		name_0: "Germany",
	}

	// Point in Germany
	assert.Equal(t, 0.0, germany.Distance(50, 10))
	// Point not in Germany
	assert.Equal(t, 6089768.964387792, germany.Distance(0, 0))
}

func Test_Geom(t *testing.T) {
	marino := Country{
		name_0: "San Marino",
	}

	assert.Equal(t,
		`{"type" : "FeatureCollection", "features" : [{"type": "Feature", "geometry": {"type":"MultiPolygon","crs":{"type":"name","properties":{"name":"EPSG:3857"}},"coordinates":[[[[1392615.77,5458642.88],[1393048.6,5457484.4],[1392992.54,5456734.77],[1392192.82,5455830.1],[1391680.06,5454324.09],[1390977.37,5453989.19],[1390516.62,5453252.22],[1390575.92,5452274.78],[1390805.57,5451937.6],[1390137.73,5450764.65],[1389958.84,5449947.79],[1387648.11,5449730.92],[1387161.41,5449232.41],[1386207.27,5449198.78],[1385697.37,5449485.17],[1385499.91,5449923.63],[1385550.62,5450289.58],[1384925.23,5450814.73],[1384600.73,5450726.97],[1384359.95,5450297.3],[1383677.78,5450106.35],[1383158.37,5450293.13],[1382301.87,5449712.65],[1381763.73,5449646.06],[1381018.05,5449940.72],[1381531.55,5450912],[1381007.85,5452902.03],[1381688.89,5453945.56],[1381770.31,5454511.59],[1381411.59,5455239.81],[1380513.67,5455945.68],[1380435.85,5457414.21],[1380598.92,5457781.08],[1381545.01,5457605.31],[1382329.26,5458495.97],[1384126.27,5458507.21],[1385227.69,5459989.1],[1387846.74,5462142.81],[1390380.52,5463215.13],[1390788.72,5463706.18],[1391403.61,5463912.17],[1391654.15,5464419.78],[1392144.09,5464733.81],[1392629.79,5464543.15],[1392761.11,5464775.72],[1392957.09,5463679.62],[1392348.35,5463068.76],[1392601.87,5461880.21],[1391955.34,5461529.11],[1392289.22,5460228.66],[1392029.65,5459534.26],[1392615.77,5458642.88]]]]}, "properties": {"name_0": "San Marino"}}]}`,
		marino.Geom())
}

func Test_NewWorldBorder(t *testing.T) {
	x, err := NewWorldBorders()
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println("X", x, len(x))
	// for key, value := range x {
	// 	fmt.Println(key, value.GetName())
	// }
	assert.Equal(t, len(x), 262)
}
